% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pimh.r
\name{pimh-object}
\alias{pimh-object}
\alias{pimh}
\alias{biips_pimh_update}
\alias{biips_pimh_samples}
\alias{is.pimh}
\alias{biips_pimh_update.pimh}
\alias{biips_pimh_samples.pimh}
\title{Manipulate PIMH objects.}
\usage{
is.pimh(object)

\method{biips_pimh_update}{pimh}(object, n_iter, n_part, thin = 1,
  output = "l", ...)

\method{biips_pimh_samples}{pimh}(object, n_iter, n_part, thin = 1,
  output = "l", ...)
}
\arguments{
\item{object}{a \code{pimh} object as returned by
\code{\link{biips_pimh_init}}.}

\item{n_iter}{integer. Number of burn-in iterations.}

\item{n_part}{integer. Number of particles used in SMC algorithms.}

\item{thin}{integer. Thinning interval. Returns samples every \code{thin}
iterations (default = 1)}

\item{output}{string. Select additional members to be returned in the
\code{\link{mcmcarray.list}} output. The string can contain several
characters in \code{('l', 'a')}. See details. (default = \code{'l'})}

\item{...}{Additional arguments to be passed to the SMC
algorithm such as \code{rs_thres} and \code{rs_type}.
See \code{\link{biips_smc_samples}}  for more details.}
}
\value{
The function \code{is.pimh} returns \code{TRUE} if the object is of
  class \code{pimh}.

The methods \code{biips_pimh_update} and \code{biips_pimh_update}
  return an object of class \code{\link{mcmcarray.list}}.

\code{biips_pimh_samples} output contains one \code{\link{mcmcarray}}
  member for each monitored variable returned by the \code{variable_names()}
  member function of the \code{pimh} object.

If the \code{output} argument is not empty, the output contains
  additional members. See details.

The members of the \code{\link{mcmcarray.list}} object are
  \code{\link{mcmcarray}} objects for different variables. Assuming \code{dim}
  is the dimension of the monitored variable, the \code{\link{mcmcarray}}
  object is an array of dimension \code{c(dim, n_iter)} with the following
  attributes (accessible with \code{\link[base]{attr}}):
  \describe{
    \item{name}{string with the name of the variable.}
    \item{lower}{vector with the lower bounds of the variable.}
    \item{upper}{vector with the upper bounds of the variable.}
  }
}
\description{
Manipulate PIMH objects.

The method \code{biips_pimh_update} performs burn-in iterations for the PIMH
algorithm.

The method \code{biips_pimh_samples} performs iterations for the PIMH
algorithm and returns samples.
}
\details{
The \code{output} string arguments can be used to query additional
  members in the \code{\link{mcmcarray.list}} output. If \code{output}
  contains:
  \describe{
    \item{l}{returns member \code{log_marg_like}. \code{\link{mcmcarray}}
      with log marginal likelihood estimates over iterations.}
    \item{a}{returns member \code{info$accept_rate}. \code{\link{mcmcarray}} with acceptance rate over
      iterations.}
  }
}
\examples{
modelfile <- system.file('extdata', 'hmm.bug', package = 'rbiips')
stopifnot(nchar(modelfile) > 0)
cat(readLines(modelfile), sep = '\\n')

data <- list(tmax = 10, p = c(.5, .5), logtau_true = log(1), logtau = log(1))
model <- biips_model(modelfile, data)

n_part <- 50
obj_pimh <- biips_pimh_init(model, c('x', 'c[2:10]'))  # Initialize
is.pimh(obj_pimh)
out_pimh_burn <- biips_pimh_update(obj_pimh, 100, n_part)  # Burn-in
out_pimh <- biips_pimh_samples(obj_pimh, 100, n_part)  # Samples

summ_pimh_x <- biips_summary(out_pimh$x, order = 2, probs = c(0.025, 0.975))
dens_pimh_x <- biips_density(out_pimh$x)
summ_pimh_c <- biips_summary(out_pimh[['c[2:10]']])
table_pimh_c <- biips_table(out_pimh[['c[2:10]']])

par(mfrow = c(2, 1))
plot(c(out_pimh_burn$log_marg_like, out_pimh$log_marg_like), type = 'l', col = 'blue',
     xlab = 'PIMH iteration', ylab = 'log p(y)')

t <- 5
plot(out_pimh$x[t, ], type = 'l', col = 'blue', xlab = 'PIMH iteration',
     ylab = paste0('x[',t,']'))
points(0, model$data()$x_true[t], pch = 17, col = 'green')

par(mfrow = c(2, 2))
plot(model$data()$x_true, type = 'l', col = 'green', xlab = 't', ylab = 'x[t]')
lines(summ_pimh_x$mean, col = 'blue')
matlines(matrix(unlist(summ_pimh_x$quant), data$tmax), lty = 2, col = 'blue')
legend('topright', leg = c('true', 'PIMH estimate'), lty = c(2, 1),
       col = c('green', 'blue'), bty = 'n')

barplot(.5*(model$data()$c_true==1), col = 'green', border = NA, space = 0, offset = 1,
        ylim=c(0,2), xlab='t', ylab='c[t]==1', axes = FALSE)
axis(1, at=1:data$tmax-.5, labels=1:data$tmax)
axis(2, line = 1, at=c(0,2), labels=NA)
text(data$tmax/2, 1.75, 'true')
barplot(.5*c(NA, summ_pimh_c$mode==1), col = 'blue', border = NA, space = 0,
        axes = FALSE, add = TRUE)
text(data$tmax/2, .75, 'PIMH mode')

plot(dens_pimh_x[[t]], col='blue', main = , ylab = 'posterior density')
points(model$data()$x_true[t], 0, pch = 17, col = 'green')

plot(table_pimh_c[[t-1]], col='blue', ylab = 'posterior probability mass')
points(model$data()$c_true[t], 0, pch = 17, col = 'green')
}
\seealso{
\code{\link{biips_pimh_init}}
}
